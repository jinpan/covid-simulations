import 'uplot/dist/uPlot.min.css';
import * as uplot from 'uplot';
import {Simulation, width, height} from './simulation';


new Simulation({
  "name": "particle_shopper0",
  "engine_config": {
    "disease_parameters": {
      "exposed_period_ticks": 15 * 60,
      "infectious_period_ticks": 45 * 60,
      "spread_parameters": {
        "background_viral_particle": {
          "exhale_radius": 9,
          "decay_rate": 0.055,
          "infection_risk_per_particle": 0.0004,
          "fraction_mask": 0.5,
          "fraction_n95_mask": 0.0,
        },
      },
    },
    "behavior_parameters": {
      "shopper": {
        "shopping_period_ticks": 10 * 60,
        "init_supply_low_range": 150,
        "init_supply_high_range": 450,
        "supplies_bought_per_trip": 30 * 60,
        "fraction_dual_shopper_households": 0.5,
        "fraction_bulk_shopper_households": 0,
        "bulk_shopper_time_multiplier": 0,
        "bulk_shopper_supplies_multiplier": 0,
      },
    },
    "bounding_box": {
      "bottom": 0,
      "left": 0,
      "top": height,
      "right": width,
    },
    "num_people": 54,
    "num_initially_infected": 2,
    "map_params": {
      "name": "simple_groceries",
      "scale": 10,
      "num_people_per_household": 1,
    },
    "misc_parameters": {
      "fraction_mask": 0.5,
      "fraction_n95_mask": 0.0,
    },
  },
  "show_dual_shopper": false,
  "show_household_supplies": {
    "max_supplies": 900,
  },
  "initial_seed": 10914,
  "chart_update_period_ticks": 30,
});

new Simulation({
  "name": "particle_shopper1",
  "engine_config": {
    "disease_parameters": {
      "exposed_period_ticks": 15 * 60,
      "infectious_period_ticks": 45 * 60,
      "spread_parameters": {
        "background_viral_particle": {
          "exhale_radius": 9,
          "decay_rate": 0.055,
          "infection_risk_per_particle": 0.0004,
          "fraction_mask": 0.5,
          "fraction_n95_mask": 0.0,
        },
      },
    },
    "behavior_parameters": {
      "shopper": {
        "shopping_period_ticks": 10 * 60,
        "init_supply_low_range": 150,
        "init_supply_high_range": 450,
        "supplies_bought_per_trip": 30 * 60,
        "fraction_dual_shopper_households": 0.5,
        "fraction_bulk_shopper_households": 0,
        "bulk_shopper_time_multiplier": 0,
        "bulk_shopper_supplies_multiplier": 0,
      },
    },
    "bounding_box": {
      "bottom": 0,
      "left": 0,
      "top": height,
      "right": width,
    },
    "num_people": 54,
    "num_initially_infected": 2,
    "map_params": {
      "name": "simple_groceries",
      "scale": 10,
      "num_people_per_household": 1,
    },
    "misc_parameters": {
      "fraction_mask": 0.0,
      "fraction_n95_mask": 0.5,
    },
  },
  "show_dual_shopper": false,
  "show_household_supplies": {
    "max_supplies": 900,
  },
  "initial_seed": 10914,
  "chart_update_period_ticks": 30,
});

// Draw the infection rate vs percent masks plot
(function(){
  let xs = [];
  for (let x = 0; x <= 100; x += 1) {
    xs.push(x);
  }
  const q1 = [77.8, 75.9, 75.9, 74.1, 74.1, 74.1, 74.1, 72.2, 72.2, 70.4, 70.4, 68.5, 68.5, 66.7, 61.1, 64.8, 63.4, 59.3, 59.3, 57.4, 59.3, 55.6, 57.4, 53.7, 53.7, 42.6, 35.2, 31.5, 46.3, 38.9, 38.9, 24.1, 18.5, 20.4, 20.4, 18.5, 19.9, 20.4, 13.0, 16.7, 14.8, 13.0, 11.1, 9.3, 10.6, 9.3, 9.3, 7.4, 8.8, 7.4, 7.4, 7.4, 7.4, 5.6, 7.4, 7.4, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 3.7, 5.6, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 5.1, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7];
  const q2 = [83.3, 81.5, 81.5, 81.5, 81.5, 79.6, 81.5, 79.6, 79.6, 77.8, 79.6, 77.8, 77.8, 77.8, 75.9, 75.9, 75.9, 74.1, 72.2, 74.1, 74.1, 72.2, 72.2, 70.4, 70.4, 66.7, 66.7, 64.8, 66.7, 64.8, 63.0, 61.1, 61.1, 57.4, 59.3, 57.4, 59.3, 55.6, 54.6, 50.0, 50.0, 50.0, 42.6, 40.7, 42.6, 42.6, 41.7, 35.2, 33.3, 25.9, 25.9, 24.1, 27.8, 25.9, 24.1, 21.3, 25.9, 18.5, 13.0, 16.7, 16.7, 14.8, 13.0, 13.0, 11.1, 13.0, 11.1, 13.0, 11.1, 9.3, 9.3, 9.3, 9.3, 11.1, 9.3, 9.3, 7.4, 9.3, 9.3, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 5.6, 5.6, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6];
  const q3 = [87.0, 87.0, 87.0, 87.0, 87.0, 85.2, 87.0, 85.2, 85.2, 85.2, 85.2, 85.2, 83.3, 83.3, 81.5, 83.3, 82.9, 81.5, 81.5, 79.6, 81.5, 81.5, 79.6, 77.8, 77.8, 77.8, 77.8, 75.9, 75.9, 75.9, 74.1, 72.2, 74.1, 72.2, 72.2, 72.2, 70.4, 69.0, 68.5, 66.7, 64.8, 66.7, 63.0, 61.1, 63.0, 63.0, 61.1, 59.3, 57.9, 55.6, 51.9, 50.0, 53.7, 50.0, 51.9, 48.1, 50.0, 40.7, 38.9, 42.6, 40.7, 37.0, 37.0, 35.2, 31.5, 33.3, 25.9, 29.6, 27.8, 24.1, 25.9, 22.2, 20.8, 25.9, 20.4, 24.1, 20.4, 20.4, 20.4, 16.7, 16.7, 16.7, 14.8, 16.7, 14.8, 13.0, 11.1, 13.0, 11.1, 11.1, 11.1, 11.1, 11.1, 9.7, 9.3, 9.7, 9.3, 9.3, 9.3, 9.3, 9.3];

  let best_fit = []
  for (let x = 0; x <= 100; x += 1) {
    const y = 86 + -.97 * x;
    best_fit.push(y);
  }

  let best_fit2 = []
  for (let x = 0; x <= 60; x += 1) {
    if (x < 40) {
      best_fit2.push(NaN);
    } else {
      const y = 116 + -1.7 * x;
      best_fit2.push(y);
    }
  }

  let data = [
    xs,
    q1, q3, q2,
    best_fit,
    best_fit2,
  ];

  const opts = {
    width: 700,
    height: 400,
    title: "Infection Rate vs Percentage of Masked Shoppers",
    scales: { x: { time: false }, y: { range: [0, 100] }, },
    series: [
      { label: "%", show: false },
      {
        label: "25th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(0, 255, 0, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
      {
        label: "Best Fit",
        dash: [1, 5],
        points: {show: false},
        value: (_, v) => v + "%",
      },
      {
        label: "Best Fit 2",
        dash: [1, 1],
        width: 3,
        points: {show: false},
        value: (_, v) => v + "%",
      },
    ],
    cursor: { show: false },
    legend: { show: false },
    axes: [
      {
        label: "Percentage of Masked Shoppers",
        values: (_, vals) => vals.map(v => v + "%")
      },
      {
        label: "Infection rate",
        values: (_, vals) => vals.map(v => v + "%")
      },
    ]
  };

  uplot.default(
    opts, data,
    document.getElementById("infection_rate_vs_pct_mask"));
})();

(function(){
  let xs = [];
  for (let x = 0; x <= 100; x += 1) {
    xs.push(x);
  }

  const q1 = [77.8, 75.9, 75.9, 74.1, 74.1, 74.1, 74.1, 72.2, 72.2, 70.4, 70.4, 68.5, 68.5, 66.7, 61.1, 64.8, 63.4, 59.3, 59.3, 57.4, 59.3, 55.6, 57.4, 53.7, 53.7, 42.6, 35.2, 31.5, 46.3, 38.9, 38.9, 24.1, 18.5, 20.4, 20.4, 18.5, 19.9, 20.4, 13.0, 16.7, 14.8, 13.0, 11.1, 9.3, 10.6, 9.3, 9.3, 7.4, 8.8, 7.4, 7.4, 7.4, 7.4, 5.6, 7.4, 7.4, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 3.7, 5.6, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 5.1, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7];
  const q2 = [83.3, 81.5, 81.5, 81.5, 81.5, 79.6, 81.5, 79.6, 79.6, 77.8, 79.6, 77.8, 77.8, 77.8, 75.9, 75.9, 75.9, 74.1, 72.2, 74.1, 74.1, 72.2, 72.2, 70.4, 70.4, 66.7, 66.7, 64.8, 66.7, 64.8, 63.0, 61.1, 61.1, 57.4, 59.3, 57.4, 59.3, 55.6, 54.6, 50.0, 50.0, 50.0, 42.6, 40.7, 42.6, 42.6, 41.7, 35.2, 33.3, 25.9, 25.9, 24.1, 27.8, 25.9, 24.1, 21.3, 25.9, 18.5, 13.0, 16.7, 16.7, 14.8, 13.0, 13.0, 11.1, 13.0, 11.1, 13.0, 11.1, 9.3, 9.3, 9.3, 9.3, 11.1, 9.3, 9.3, 7.4, 9.3, 9.3, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 5.6, 5.6, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6];
  const q3 = [87.0, 87.0, 87.0, 87.0, 87.0, 85.2, 87.0, 85.2, 85.2, 85.2, 85.2, 85.2, 83.3, 83.3, 81.5, 83.3, 82.9, 81.5, 81.5, 79.6, 81.5, 81.5, 79.6, 77.8, 77.8, 77.8, 77.8, 75.9, 75.9, 75.9, 74.1, 72.2, 74.1, 72.2, 72.2, 72.2, 70.4, 69.0, 68.5, 66.7, 64.8, 66.7, 63.0, 61.1, 63.0, 63.0, 61.1, 59.3, 57.9, 55.6, 51.9, 50.0, 53.7, 50.0, 51.9, 48.1, 50.0, 40.7, 38.9, 42.6, 40.7, 37.0, 37.0, 35.2, 31.5, 33.3, 25.9, 29.6, 27.8, 24.1, 25.9, 22.2, 20.8, 25.9, 20.4, 24.1, 20.4, 20.4, 20.4, 16.7, 16.7, 16.7, 14.8, 16.7, 14.8, 13.0, 11.1, 13.0, 11.1, 11.1, 11.1, 11.1, 11.1, 9.7, 9.3, 9.7, 9.3, 9.3, 9.3, 9.3, 9.3];

  const n95_q1 = [75.9, 74.1, 74.1, 74.1, 74.1, 70.4, 70.4, 61.1, 68.5, 66.7, 64.8, 51.9, 64.8, 63.0, 48.1, 57.4, 50.9, 50.0, 27.8, 46.3, 37.0, 40.7, 35.2, 40.7, 44.4, 29.6, 11.1, 11.1, 11.1, 22.2, 7.4, 11.1, 11.1, 9.3, 8.8, 6.9, 7.4, 5.6, 5.6, 7.4, 5.6, 7.4, 5.6, 5.1, 3.7, 6.9, 5.6, 5.6, 3.7, 3.7, 3.7, 5.6, 3.7, 3.7, 3.7, 3.7, 5.1, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]
  const n95_q2 = [79.6, 79.6, 79.6, 81.5, 79.6, 79.6, 77.8, 75.9, 75.9, 75.9, 72.2, 72.2, 72.2, 70.4, 66.7, 68.5, 66.7, 66.7, 61.1, 59.3, 59.3, 61.1, 57.4, 57.4, 57.4, 48.1, 44.4, 51.9, 44.4, 44.4, 37.0, 48.1, 41.7, 36.1, 40.7, 26.9, 30.6, 16.7, 19.4, 27.8, 23.1, 20.4, 18.5, 12.0, 17.6, 18.5, 13.0, 21.3, 12.0, 11.1, 9.3, 13.0, 7.4, 7.4, 9.3, 9.3, 7.4, 7.4, 5.6, 5.6, 5.6, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 3.7, 3.7, 5.6, 5.6, 3.7, 3.7, 5.6, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]
  const n95_q3 = [87.0, 85.2, 87.0, 83.3, 83.3, 83.3, 83.3, 79.6, 79.6, 81.5, 81.5, 79.6, 75.9, 75.9, 74.1, 77.8, 72.7, 72.2, 70.4, 68.5, 68.5, 66.7, 64.8, 64.8, 64.8, 61.1, 59.3, 61.1, 57.4, 57.4, 55.6, 57.4, 52.3, 52.3, 54.2, 50.0, 53.7, 43.1, 35.6, 42.6, 40.7, 43.1, 37.5, 37.5, 37.0, 38.9, 31.5, 37.0, 33.3, 24.5, 25.9, 25.9, 27.8, 18.5, 24.1, 18.5, 18.5, 15.3, 18.5, 13.0, 17.1, 14.8, 13.0, 11.1, 9.3, 9.3, 11.1, 9.7, 9.3, 7.4, 7.4, 9.3, 9.3, 5.6, 7.4, 9.3, 7.9, 6.0, 7.4, 5.6, 7.4, 7.4, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 5.6, 3.7, 3.7, 4.2, 3.7, 5.6, 3.7, 3.7, 3.7, 3.7, 3.7]

  let best_fit = []
  for (let x = 0; x <= 100; x += 1) {
    const y = 86 + -1.48 * x;
    best_fit.push(y);
  }

  let data = [
    xs,
    q1, q3, q2,
    n95_q1, n95_q3, n95_q2,
  ];

  const opts = {
    width: 700,
    height: 400,
    title: "Infection Rate vs Percentage of {Regular,N95}-Masked Shoppers",
    scales: { x: { time: false }, y: { range: [0, 100] }, },
    series: [
      { label: "%", show: false },
      {
        label: "25th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(0, 255, 0, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
      {
        label: "25th pct",
        fill: "rgba(255, 0, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(255, 0, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(255, 0, 0, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
    ],
    cursor: { show: false },
    legend: { show: false },
    axes: [
      {
        label: "Percentage of Masked Shoppers",
        values: (_, vals) => vals.map(v => v + "%")
      },
      {
        label: "Infection rate",
        values: (_, vals) => vals.map(v => v + "%")
      },
    ]
  };

  uplot.default(
    opts, data,
    document.getElementById("infection_rate_vs_pct_n95_mask"));
})();

(function(){
  let xs = [];
  for (let x = 0; x <= 100; x += 1) {
    xs.push(x);
  }

  const none_q1 = [77.8, 75.5, 75.5, 75.0, 73.1, 72.5, 72.5, 72.0, 72.0, 69.4, 71.4, 66.7, 68.8, 68.1, 60.9, 63.0, 62.2, 60.0, 59.1, 56.8, 58.7, 55.8, 54.8, 52.4, 51.2, 37.5, 32.5, 28.2, 43.6, 36.8, 36.8, 21.6, 18.9, 19.4, 19.4, 17.1, 17.1, 17.6, 12.1, 14.4, 11.7, 9.4, 9.7, 6.5, 10.0, 6.7, 6.9, 6.9, 7.1, 3.6, 3.7, 3.8, 3.8, 4.0, 4.0, 4.2, 4.2, 4.3, 4.3, 4.5, 4.5, 4.8, 0.0, 5.0, 5.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, NaN]
  const none_q2 = [83.3, 83.0, 81.1, 82.7, 82.7, 80.4, 80.4, 80.0, 80.0, 77.6, 79.6, 77.1, 79.2, 76.6, 73.9, 76.1, 75.6, 73.3, 72.7, 72.7, 74.4, 72.1, 71.4, 71.4, 70.7, 65.0, 67.5, 64.1, 66.7, 65.8, 63.2, 59.5, 59.5, 55.6, 58.3, 57.1, 58.6, 55.9, 54.5, 48.5, 48.4, 46.9, 38.7, 38.7, 40.0, 41.7, 37.9, 34.5, 32.1, 25.0, 25.9, 19.2, 23.1, 24.0, 24.0, 18.8, 20.8, 17.4, 13.0, 13.6, 13.6, 14.3, 9.5, 10.0, 10.5, 10.5, 5.6, 11.1, 11.8, 11.8, 6.2, 6.2, 6.7, 6.7, 7.1, 7.1, 7.7, 8.3, 8.3, 9.1, 9.1, 10.0, 10.0, 11.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, NaN]
  const none_q3 = [87.0, 86.8, 86.8, 86.5, 86.5, 86.3, 86.3, 86.0, 86.0, 85.7, 85.7, 85.4, 83.3, 83.0, 82.6, 82.6, 82.2, 82.2, 81.8, 81.8, 81.4, 81.4, 78.6, 78.6, 80.5, 77.5, 77.5, 76.9, 76.9, 76.3, 73.7, 73.0, 75.7, 72.2, 72.2, 71.4, 71.4, 70.6, 69.7, 67.4, 65.6, 68.8, 64.5, 61.3, 64.2, 63.3, 62.1, 58.6, 60.7, 57.1, 55.6, 50.0, 53.8, 52.0, 52.0, 50.0, 54.2, 39.1, 39.1, 40.9, 40.9, 38.1, 38.1, 35.0, 31.6, 31.6, 22.2, 27.8, 29.4, 23.5, 25.0, 25.0, 20.0, 26.7, 21.4, 28.6, 23.1, 25.0, 25.0, 18.2, 18.2, 20.0, 20.0, 22.2, 22.2, 12.5, 12.5, 14.3, 16.7, 16.7, 20.0, 20.0, 6.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, NaN]

  const reg_q1 = [NaN, 100.0, 100.0, 50.0, 50.0, 66.7, 66.7, 50.0, 75.0, 60.0, 60.0, 66.7, 66.7, 57.1, 50.0, 62.5, 55.6, 55.6, 60.0, 50.0, 54.5, 54.5, 58.3, 50.0, 53.8, 42.9, 35.7, 33.3, 46.7, 43.8, 37.5, 29.4, 29.4, 27.8, 27.8, 21.1, 21.1, 25.0, 19.0, 19.0, 18.2, 18.2, 13.0, 13.0, 12.5, 12.5, 12.0, 12.0, 11.5, 7.7, 11.1, 10.7, 10.7, 6.9, 10.3, 10.0, 10.0, 9.7, 6.5, 6.2, 9.4, 6.1, 6.1, 5.9, 5.7, 5.7, 5.6, 5.6, 5.4, 5.4, 5.3, 5.3, 5.1, 5.1, 5.0, 5.0, 4.9, 4.8, 4.8, 4.7, 4.7, 4.5, 4.5, 4.4, 4.4, 4.3, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4.0, 4.0, 3.9, 3.9, 3.8, 3.8, 3.8, 3.8, 3.7]
  const reg_q2 = [NaN, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 75.0, 75.0, 80.0, 80.0, 83.3, 83.3, 71.4, 75.0, 75.0, 77.8, 77.8, 70.0, 70.0, 72.7, 72.7, 75.0, 66.7, 69.2, 71.4, 64.3, 66.7, 66.7, 62.5, 62.5, 58.8, 58.8, 55.6, 61.1, 57.9, 57.9, 55.0, 52.4, 47.6, 50.0, 50.0, 43.5, 43.5, 45.8, 41.7, 44.0, 36.0, 34.6, 26.9, 25.9, 25.0, 28.6, 27.6, 24.1, 25.0, 26.7, 19.4, 16.1, 15.6, 18.8, 15.2, 15.2, 14.7, 11.4, 14.3, 11.1, 13.9, 13.5, 10.8, 10.5, 10.5, 10.3, 12.8, 10.0, 10.0, 9.8, 9.5, 9.5, 9.3, 9.3, 9.1, 9.1, 8.9, 6.7, 6.5, 6.5, 6.4, 6.2, 6.2, 6.1, 6.1, 6.0, 6.0, 5.9, 5.9, 5.8, 5.8, 5.7, 5.7, 5.6]
  const reg_q3 = [NaN, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 83.3, 83.3, 85.7, 87.5, 87.5, 88.9, 88.9, 80.0, 80.0, 81.8, 81.8, 83.3, 83.3, 76.9, 78.6, 78.6, 73.3, 80.0, 75.0, 75.0, 76.5, 70.6, 72.2, 72.2, 68.4, 73.7, 70.0, 66.7, 66.7, 68.2, 63.6, 60.9, 60.9, 62.5, 62.5, 60.0, 60.0, 57.7, 53.8, 51.9, 46.4, 52.7, 48.3, 48.3, 46.7, 50.0, 38.7, 38.7, 40.6, 40.6, 39.4, 36.4, 35.3, 28.6, 31.4, 27.8, 30.6, 27.0, 24.3, 26.3, 21.1, 23.1, 25.6, 20.0, 23.1, 19.5, 19.0, 19.0, 16.3, 16.3, 15.9, 15.9, 15.6, 15.6, 13.0, 13.0, 12.8, 12.5, 12.5, 10.2, 10.2, 10.0, 10.0, 9.8, 9.8, 9.6, 9.6, 9.4, 9.4, 9.3]

  const n95_q1 = [NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 20.0, 16.7, 16.7, 14.3, 12.5, 12.5, 11.1, 11.1, 10.0, 10.0, 18.2, 9.1, 8.3, 8.3, 7.7, 7.1, 7.1, 6.7, 6.7, 6.2, 7.8, 11.8, 5.9, 6.9, 5.6, 10.5, 10.5, 5.0, 4.8, 4.8, 4.5, 4.5, 4.3, 4.3, 4.2, 4.2, 4.0, 4.0, 3.8, 3.8, 3.7, 3.6, 3.6, 3.4, 3.4, 6.7, 3.3, 3.2, 3.2, 3.1, 3.1, 3.0, 3.0, 2.9, 5.7, 5.7, 5.6, 5.6, 5.4, 2.7, 2.6, 5.3, 5.1, 2.6, 5.0, 5.0, 4.9, 4.8, 2.4, 4.7, 4.7, 4.5, 4.5, 4.4, 4.4, 4.3, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4.0, 4.0, 3.9, 3.9, 3.8, 3.8, 3.8, 3.8, 3.7]
  const n95_q2 = [NaN, 0.0, 0.0, 50.0, 50.0, 33.3, 33.3, 25.0, 25.0, 20.0, 20.0, 33.3, 33.3, 28.6, 25.0, 25.0, 22.2, 22.2, 20.0, 20.0, 22.7, 18.2, 20.8, 20.8, 23.1, 21.4, 14.3, 20.0, 20.0, 18.8, 18.8, 17.6, 11.8, 16.7, 11.1, 15.8, 15.8, 10.0, 9.5, 9.5, 9.1, 11.4, 8.7, 8.7, 8.3, 8.3, 8.0, 8.0, 7.7, 7.7, 7.4, 7.1, 7.1, 6.9, 6.9, 6.7, 6.7, 6.5, 6.5, 6.2, 6.2, 6.1, 6.1, 5.9, 5.7, 5.7, 5.6, 5.6, 5.4, 5.4, 5.3, 5.3, 5.1, 5.1, 5.0, 5.0, 4.9, 4.8, 4.8, 4.7, 4.7, 4.5, 4.5, 4.4, 4.4, 4.3, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4.0, 4.0, 3.9, 3.9, 3.8, 3.8, 3.8, 3.8, 3.7]
  const n95_q3 = [NaN, 100.0, 100.0, 50.0, 50.0, 33.3, 33.3, 50.0, 50.0, 40.0, 40.0, 50.0, 50.0, 42.9, 37.5, 37.5, 33.3, 33.3, 40.0, 30.0, 36.4, 36.4, 33.3, 31.2, 30.8, 28.6, 28.6, 26.7, 26.7, 25.0, 25.0, 27.9, 23.5, 22.2, 22.2, 26.3, 26.3, 20.0, 17.9, 19.0, 18.2, 18.2, 17.4, 16.3, 16.7, 16.7, 12.0, 16.0, 15.4, 11.5, 11.1, 10.7, 10.7, 10.3, 10.3, 12.5, 10.0, 9.7, 9.7, 9.4, 9.4, 9.1, 9.1, 8.8, 8.6, 8.6, 7.6, 8.3, 5.4, 5.4, 5.3, 7.9, 7.7, 5.1, 5.0, 5.0, 7.3, 7.1, 4.8, 4.7, 4.7, 6.8, 4.5, 4.4, 6.1, 4.3, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4.0, 4.0, 3.9, 3.9, 3.8, 3.8, 3.8, 3.8, 3.7]

  let data = [
    xs,
    none_q1, none_q3, none_q2,
    reg_q1, reg_q3, reg_q2,
    n95_q1, n95_q3, n95_q2,
  ];

  const opts = {
    width: 700,
    height: 400,
    title: "Infection Rate vs Percentage of N95-Masked Shoppers",
    scales: { x: { time: false }, y: { range: [0, 100] }, },
    series: [
      { label: "%", show: false },
      {
        label: "25th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(0, 255, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(0, 255, 0, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
      {
        label: "25th pct",
        fill: "rgba(0, 0, 255, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(0, 0, 255, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(0, 0, 255, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
      {
        label: "25th pct",
        fill: "rgba(255, 0, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "75th pct",
        fill: "rgba(255, 0, 0, .07)",
        value: (_, v) => v + "%",
        band: true,
        width: 0,
        points: {show: false},
      },
      {
        label: "Median",
        stroke: "rgba(255, 0, 0, 0.8)",
        points: {show: false},
        value: (_, v) => v + "%",
      },
    ],
    cursor: { show: false },
    legend: { show: false },
    axes: [
      {
        label: "Percentage of Masked Shoppers",
        values: (_, vals) => vals.map(v => v + "%")
      },
      {
        label: "Infection rate",
        values: (_, vals) => vals.map(v => v + "%")
      },
    ]
  };

  uplot.default(
    opts, data,
    document.getElementById("infection_rate_by_mask_type"));
})();
